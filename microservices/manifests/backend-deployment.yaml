apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: microservices
  labels:
    app: backend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        version: v1
    spec:
      containers:
      - name: backend
        image: node:18-alpine
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DATABASE_URL
          value: "postgresql://postgres:password@postgres:5432/microservices"
        - name: REDIS_URL
          value: "redis://redis:6379"
        command: ["sh", "-c", "cd /app && node server-simple.js"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: app-code
          mountPath: /app
        workingDir: /app
      volumes:
      - name: app-code
        configMap:
          name: backend-code
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: microservices
  labels:
    app: backend
    version: v1
spec:
  selector:
    app: backend
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-code
  namespace: microservices
data:
  server.js: |
    const express = require('express');
    const { v4: uuidv4 } = require('uuid');
    const app = express();
    const port = process.env.PORT || 8080;
    
    // Middleware
    app.use(express.json());
    app.use((req, res, next) => {
      req.requestId = uuidv4();
      console.log(`[${new Date().toISOString()}] ${req.method} ${req.path} - Request ID: ${req.requestId}`);
      next();
    });
    
    // Health check endpoint
    app.get('/health', (req, res) => {
      res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        service: 'backend',
        version: 'v1.0.0',
        requestId: req.requestId,
        uptime: process.uptime()
      });
    });
    
    // API endpoints
    app.get('/api/health', (req, res) => {
      res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        service: 'backend-api',
        version: 'v1.0.0',
        requestId: req.requestId,
        uptime: process.uptime(),
        environment: {
          nodeVersion: process.version,
          platform: process.platform,
          arch: process.arch
        }
      });
    });
    
    app.get('/api/status', (req, res) => {
      res.json({
        service: 'backend',
        status: 'running',
        timestamp: new Date().toISOString(),
        requestId: req.requestId,
        metrics: {
          memoryUsage: process.memoryUsage(),
          cpuUsage: process.cpuUsage(),
          uptime: process.uptime()
        }
      });
    });
    
    app.get('/api/users', (req, res) => {
      const users = [
        { id: 1, name: 'John Doe', email: 'john@example.com' },
        { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
        { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }
      ];
      
      res.json({
        users,
        count: users.length,
        requestId: req.requestId,
        timestamp: new Date().toISOString()
      });
    });
    
    app.post('/api/users', (req, res) => {
      const { name, email } = req.body;
      
      if (!name || !email) {
        return res.status(400).json({
          error: 'Name and email are required',
          requestId: req.requestId
        });
      }
      
      const newUser = {
        id: Date.now(),
        name,
        email,
        createdAt: new Date().toISOString()
      };
      
      res.status(201).json({
        message: 'User created successfully',
        user: newUser,
        requestId: req.requestId
      });
    });
    
    // Error handling middleware
    app.use((err, req, res, next) => {
      console.error(`[${new Date().toISOString()}] Error:`, err);
      res.status(500).json({
        error: 'Internal server error',
        requestId: req.requestId,
        timestamp: new Date().toISOString()
      });
    });
    
    // 404 handler
    app.use((req, res) => {
      res.status(404).json({
        error: 'Not found',
        path: req.path,
        requestId: req.requestId,
        timestamp: new Date().toISOString()
      });
    });
    
    app.listen(port, '0.0.0.0', () => {
      console.log(`Backend server running on port ${port}`);
      console.log(`Health check available at http://localhost:${port}/health`);
    });
  
  package.json: |
    {
      "name": "backend-service",
      "version": "1.0.0",
      "description": "Backend service for microservices demo",
      "main": "server.js",
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    }
  
  server-simple.js: |
    const http = require('http');
    const crypto = require('crypto');
    
    const port = process.env.PORT || 8080;
    
    // Simple UUID generator
    function generateId() {
      return crypto.randomBytes(16).toString('hex');
    }
    
    const server = http.createServer((req, res) => {
      const requestId = generateId();
      console.log(`[${new Date().toISOString()}] ${req.method} ${req.url} - Request ID: ${requestId}`);
      
      // Set CORS headers
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      
      if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
      }
      
      // Health check endpoint
      if (req.url === '/health' || req.url === '/api/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          status: 'healthy',
          timestamp: new Date().toISOString(),
          service: 'backend-api',
          version: 'v1.0.0',
          requestId: requestId,
          uptime: process.uptime()
        }));
        return;
      }
      
      // Status endpoint
      if (req.url === '/api/status') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          service: 'backend',
          status: 'running',
          timestamp: new Date().toISOString(),
          requestId: requestId,
          metrics: {
            memoryUsage: process.memoryUsage(),
            uptime: process.uptime()
          }
        }));
        return;
      }
      
      // Users endpoint
      if (req.url === '/api/users') {
        const users = [
          { id: 1, name: 'John Doe', email: 'john@example.com' },
          { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
          { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }
        ];
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          users,
          count: users.length,
          requestId: requestId,
          timestamp: new Date().toISOString()
        }));
        return;
      }
      
      // Default response
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({
        error: 'Not found',
        path: req.url,
        requestId: requestId,
        timestamp: new Date().toISOString()
      }));
    });
    
    server.listen(port, '0.0.0.0', () => {
      console.log(`Backend server running on port ${port}`);
      console.log(`Health check available at http://localhost:${port}/health`);
    });
